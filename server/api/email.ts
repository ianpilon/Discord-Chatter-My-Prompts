import { Request, Response } from 'express';
import { z } from 'zod';
import Mailjet from 'node-mailjet';

// Validation schema for email requests
export const emailReportSchema = z.object({
  to: z.string().email(),
  subject: z.string().optional(),
  content: z.string(),
  analysisType: z.string().optional(),
});

// Initialize Mailjet client
// Note: These API keys should come from environment variables in production
const mailjet = Mailjet.apiConnect(
  process.env.MAILJET_API_KEY || 'your-mailjet-api-key',
  process.env.MAILJET_SECRET_KEY || 'your-mailjet-secret-key'
);

/**
 * Send an email directly (utility function)
 */
export const sendEmailDirect = async (to: string, subject: string, content: string): Promise<any> => {
  try {
    // Create the email request
    const request = mailjet.post('send', { version: 'v3.1' }).request({
      Messages: [
        {
          From: {
            Email: process.env.SENDER_EMAIL || 'discord-digest@example.com',
            Name: 'Discord Digest'
          },
          To: [
            {
              Email: to,
              Name: to.split('@')[0] // Use part before @ as name
            }
          ],
          Subject: subject,
          TextPart: content,
          HTMLPart: `<div style="font-family: Arial, sans-serif; padding: 20px; color: #2e3338;">
            <h2 style="color: #5865F2;">Discord Digest Analysis</h2>
            <div style="white-space: pre-wrap; background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin-top: 15px;">
              ${content.replace(/\n/g, '<br>')}
            </div>
            <p style="color: #72767d; font-size: 12px; margin-top: 20px;">
              This report was generated by Discord Digest. If you did not request this report, please disregard this email.
            </p>
          </div>`
        }
      ]
    });
    
    // Send the email
    const response = await request;
    return response.body;
  } catch (error) {
    console.error('Error sending email directly:', error);
    throw error;
  }
};

/**
 * Handler for sending email reports via Mailjet
 */
export const sendEmail = async (req: Request, res: Response) => {
  try {
    // Validate the request body
    const validatedData = emailReportSchema.parse(req.body);
    
    // Extract email data
    const { to, subject, content, analysisType } = validatedData;
    
    // Default subject if not provided
    const emailSubject = subject || `Discord ${analysisType || 'Analysis'} Report`;
    
    // Create the email request
    const request = mailjet.post('send', { version: 'v3.1' }).request({
      Messages: [
        {
          From: {
            Email: process.env.SENDER_EMAIL || 'discord-digest@example.com',
            Name: 'Discord Digest'
          },
          To: [
            {
              Email: to,
              Name: to.split('@')[0] // Use part before @ as name
            }
          ],
          Subject: emailSubject,
          TextPart: content,
          HTMLPart: `<div style="font-family: Arial, sans-serif; padding: 20px; color: #2e3338;">
            <h2 style="color: #5865F2;">Discord Digest Analysis</h2>
            <div style="white-space: pre-wrap; background-color: #f9f9f9; padding: 15px; border-radius: 5px; margin-top: 15px;">
              ${content.replace(/\n/g, '<br>')}
            </div>
            <p style="color: #72767d; font-size: 12px; margin-top: 20px;">
              This report was generated by Discord Digest. If you did not request this report, please disregard this email.
            </p>
          </div>`
        }
      ]
    });
    
    // Send the email
    const response = await request;
    
    // Return success response
    return res.status(200).json({
      success: true,
      message: 'Email sent successfully',
      data: response.body
    });
  } catch (error) {
    console.error('Error sending email:', error);
    
    // Handle validation errors
    if (error instanceof z.ZodError) {
      return res.status(400).json({
        success: false,
        message: 'Invalid request data',
        errors: error.errors
      });
    }
    
    // Handle other errors
    return res.status(500).json({
      success: false,
      message: error instanceof Error ? error.message : 'An unexpected error occurred'
    });
  }
};
